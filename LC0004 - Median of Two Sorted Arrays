class Solution {
    PriorityQueue<Integer> max = new PriorityQueue<>(11, Collections.reverseOrder());
    PriorityQueue<Integer> min = new PriorityQueue<>();
    
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        for (int i = 0; i < nums1.length; i++) {
            addNum(nums1[i]);
            balance();
        }
        for (int i = 0; i < nums2.length; i++) {
            addNum(nums2[i]);
            balance();
        }
        return getMedian();
    }
    
    private void addNum(int num) {
        if (max.isEmpty() || num < max.peek()) {
            max.offer(num);
        } else {
            min.offer(num);
        }
    }
    
    private void balance() {
        int size1 = max.size();
        int size2 = min.size();
        if (size1 > size2 + 1) {
            min.offer(max.poll());
        } else if (size1 < size2) {
            max.offer(min.poll());
        }
    }
    
    private double getMedian() {
        int size1 = max.size();
        int size2 = min.size();
        if ((size1 + size2) % 2 == 0) {
            return (double) (max.peek() / 2.0 + min.peek() / 2.0);
        } else {
            return (double) max.peek();
        }
    }
}
