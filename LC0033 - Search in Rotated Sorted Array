
/*
/*
input: sorted
结果不一定存在，返回-1

先判断nums[mid]是否是target，
再nums[mid]与nums[right]进行比较，判断(mid, right]是否是单调区间，根据单调性来确定区间范围，从而确定要往left还是right移动
*/
*/

class Solution {
    public int search(int[] nums, int target) {
        //sanity check
        if (nums == null || nums.length == 0) {
            return -1;
        }
        int left = 0;
        int right = nums.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < nums[right]) {
                if (nums[mid] < target && nums[right] >= target) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            } else {
                if (nums[left] <= target && nums[mid] > target) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
        }
        return -1;
    }
}

